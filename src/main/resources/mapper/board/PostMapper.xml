<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ldb.lms.mapper.mybatis.board.PostMapper">

    <!-- 게시글 목록 조회 -->
    <select id="listPosts" parameterType="map" resultType="PostDto">
        SELECT
            p.post_id,
            p.author_id,
            COALESCE(s.student_name, pr.professor_name) AS userName,
            p.post_title,
            p.post_group,
            p.post_group_level,
            p.post_group_step,
            p.post_read_count,
            p.post_created_at,
            p.post_notice
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        <where>
            <if test="searchDto.searchKeyword != null and searchDto.searchKeyword != '' and searchDto.searchType != null and searchDto.searchType != ''">
                AND (
                <trim prefixOverrides="OR">
                    <if test="searchDto.searchType.contains('postTitle')">
                        p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </if>
                    <if test="searchDto.searchType.contains('postContent')">
                        OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </if>
                    <if test="searchDto.searchType.contains('userName')">
                        OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </if>
                </trim>
                )
            </if>
            <if test="searchDto.postNotice != null">
                AND p.post_notice = #{searchDto.postNotice}
            </if>
        </where>
        ORDER BY
            p.post_group DESC,
            p.post_group_step ASC
        LIMIT #{pageDto.itemsPerPage} OFFSET #{pageDto.offset}
    </select>

    <!-- 공지사항 목록 조회 -->
    <select id="listNotices" parameterType="PostSearchDto" resultType="PostDto">
        SELECT
            p.post_id,
            p.author_id,
            COALESCE(s.student_name, pr.professor_name) AS userName,
            p.post_title,
            p.post_read_count,
            p.post_created_at,
            p.post_notice
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        WHERE p.post_notice = 1
        ORDER BY p.post_id DESC
    </select>

    <!-- 게시글 수 조회 -->
    <select id="countPosts" parameterType="PostSearchDto" resultType="int">
        SELECT
            COUNT(*)
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        <where>
            <if test="searchKeyword != null and searchKeyword != '' and searchType != null and searchType != ''">
                AND (
                <trim prefixOverrides="OR">
                    <if test="searchType.contains('postTitle')">
                        p.post_title LIKE CONCAT('%', #{searchKeyword}, '%')
                    </if>
                    <if test="searchType.contains('postContent')">
                        OR p.post_content LIKE CONCAT('%', #{searchKeyword}, '%')
                    </if>
                    <if test="searchType.contains('userName')">
                        OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchKeyword}, '%')
                    </if>
                </trim>
                )
            </if>
            <if test="postNotice != null">
                AND p.post_notice = #{postNotice}
            </if>
        </where>
    </select>

    <!-- 특정 게시글 조회 -->
    <select id="getPost" parameterType="String" resultType="PostDto">
        SELECT
            p.post_id,
            p.author_id,
            COALESCE(s.student_name, pr.professor_name) AS userName,
            p.post_title,
            p.post_content,
            p.post_password,
            p.post_group,
            p.post_group_level,
            p.post_group_step,
            p.post_file AS existingFilePath,
            p.post_read_count,
            p.post_created_at,
            p.post_updated_at,
            p.post_notice
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        WHERE p.post_id = #{postId}
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertPost" parameterType="PostDto">
        INSERT INTO post (
            post_id, author_id, post_title,
            post_content, post_password, post_group,
            post_group_level, post_group_step, post_file,
            post_read_count, post_created_at, post_updated_at, post_notice
        ) VALUES (
            #{postId}, #{authorId}, #{postTitle},
            #{postContent}, #{postPassword}, #{postGroup},
            #{postGroupLevel}, #{postGroupStep}, #{existingFilePath},
            0, NOW(), NOW(), #{postNotice}
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="PostDto">
        UPDATE post
        SET
            post_title = #{postTitle},
            post_content = #{postContent},
            post_password = #{postPassword},
            post_file = #{existingFilePath},
            post_updated_at = NOW(),
            post_notice = #{postNotice}
        WHERE
            post_id = #{postId}
    </update>

    <!-- 게시글 그룹 스텝 업데이트 -->
    <update id="updateGroupStep" parameterType="map">
        UPDATE post
        SET post_group_step = post_group_step + 1
        WHERE post_group = #{postGroup} AND post_group_step > #{postGroupStep}
    </update>

    <!-- 게시글 조회수 증가 -->
    <update id="incrementReadCount" parameterType="String">
        UPDATE post
        SET post_read_count = post_read_count + 1
        WHERE post_id = #{postId}
    </update>

    <!-- 게시글 삭제 -->
    <delete id="deletePost" parameterType="String">
        DELETE FROM post
        WHERE post_id = #{postId}
    </delete>

    <!-- 마지막 게시글 ID 조회 -->
    <select id="getLastPostId" resultType="String">
        SELECT post_id FROM post ORDER BY post_id DESC LIMIT 1
    </select>

    <!-- 최대 게시글 그룹 번호 조회 -->
    <select id="getMaxGroup" resultType="Integer">
        SELECT MAX(post_group) FROM post
    </select>

    <!-- 게시글 댓글 목록 조회 -->
    <select id="selectCommentList" parameterType="String" resultType="CommentDto">
        SELECT
            c.comment_id, c.post_id, c.writer_id,
            COALESCE(s.student_name, pr.professor_name) AS writerName,
            c.comment_content, c.parent_comment_id,
            c.created_at, c.updated_at
        FROM post_comment c
        LEFT JOIN student s ON c.writer_id = s.student_id
        LEFT JOIN professor pr ON c.writer_id = pr.professor_id
        WHERE c.post_id = #{postId}
        ORDER BY c.created_at ASC
    </select>

    <!-- 특정 댓글 조회 -->
    <select id="selectComment" parameterType="String" resultType="CommentDto">
        SELECT
            comment_id, post_id, writer_id, comment_content
        FROM post_comment
        WHERE comment_id = #{commentId}
    </select>

    <!-- 댓글 등록 -->
    <insert id="insertComment" parameterType="CommentDto">
        INSERT INTO post_comment (
            comment_id, post_id, writer_id,
            comment_content, parent_comment_id,
            created_at, updated_at
        ) VALUES (
            #{commentId}, #{postId}, #{writerId},
            #{commentContent}, #{parentCommentId},
            NOW(), NOW()
        )
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="CommentDto">
        UPDATE post_comment
        SET
            comment_content = #{commentContent},
            updated_at = NOW()
        WHERE
            comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="String">
        DELETE FROM post_comment WHERE comment_id = #{commentId}
    </delete>

    <!-- 게시글에 연결된 모든 댓글 삭제 -->
    <delete id="deleteCommentsByPostId" parameterType="String">
        DELETE FROM post_comment WHERE post_id = #{postId}
    </delete>

    <!-- 마지막 댓글 ID 조회 -->
    <select id="getLastCommentId" resultType="String">
        SELECT comment_id FROM post_comment ORDER BY comment_id DESC LIMIT 1
    </select>

</mapper>
