<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ldb.lms.mapper.board.PostMapper">

    <select id="getLastPostId" resultType="string">
        SELECT post_id
        FROM post
        ORDER BY post_id DESC
        LIMIT 1
    </select>

    <select id="getLastCommentId" resultType="string">
        SELECT comment_id
        FROM post_comment
        ORDER BY comment_id DESC
        LIMIT 1
    </select>

    <insert id="insertPost" parameterType="com.ldb.lms.dto.board.post.PostDto">
        INSERT INTO post (
            post_id, author_id, post_title, post_content, post_password,
            post_notice, post_group, post_group_level, post_group_step,
            file_path, post_created_at, post_updated_at, post_read_count
        ) VALUES (
            #{postId}, #{authorId}, #{postTitle}, #{postContent}, #{postPassword},
            COALESCE(#{postNotice}, 0), COALESCE(#{postGroup}, #{postId}), COALESCE(#{postGroupLevel}, 0), COALESCE(#{postGroupStep}, 0),
            #{existingFilePath}, NOW(), NOW(), 0
        )
    </insert>

    <update id="updatePost" parameterType="com.ldb.lms.dto.board.post.PostDto">
        UPDATE post
        SET post_title = #{postTitle},
            post_content = #{postContent},
            post_password = #{postPassword},
            file_path = #{existingFilePath},
            post_updated_at = NOW()
        WHERE post_id = #{postId}
    </update>

    <delete id="deletePost" parameterType="string">
        DELETE FROM post WHERE post_id = #{postId}
    </delete>

    <delete id="deleteWithComments" parameterType="string">
        DELETE FROM post_comment WHERE post_id = #{postId} </delete>

    <update id="incrementReadCount" parameterType="string">
        UPDATE post SET post_read_count = post_read_count + 1 WHERE post_id = #{postId}
    </update>

    <select id="getPost" parameterType="string" resultType="com.ldb.lms.dto.board.post.PostDto">
        SELECT p.post_id, p.author_id,
               COALESCE(s.student_name, pr.professor_name) AS userName,
               p.post_title, p.post_content, p.post_password,
               p.post_notice, p.post_group, p.post_group_level, p.post_group_step,
               p.file_path AS existingFilePath, p.post_read_count, p.post_created_at, p.post_updated_at
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        WHERE p.post_id = #{postId}
    </select>

    <select id="listNotices" parameterType="map" resultType="map">
        SELECT p.post_id,
               p.author_id,
               COALESCE(s.student_name, pr.professor_name) AS user_name,
               p.post_title,
               p.post_notice,
               p.post_read_count,
               p.post_created_at,
               p.post_updated_at
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        WHERE p.post_notice = 1
        <where>
            <if test="searchDto.searchType != null and searchDto.searchType != ''">
                <choose>
                    <when test="searchDto.searchType == 'userName'">
                        AND COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </when>
                    <when test="searchDto.searchType == 'postTitle'">
                        AND p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </when>
                    <when test="searchDto.searchType == 'postContent'">
                        AND p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </when>
                    <when test="searchDto.searchType == 'postTitle,userName'">
                        AND (p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                    <when test="searchDto.searchType == 'postTitle,postContent'">
                        AND (p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                    <when test="searchDto.searchType == 'userName,postContent'">
                        AND (COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                    <when test="searchDto.searchType == 'postTitle,userName,postContent'">
                        AND (p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY p.post_created_at DESC
        LIMIT #{pageDto.itemsPerPage} OFFSET #{pageDto.offset}
    </select>

    <select id="listPosts" parameterType="map" resultType="map">
        SELECT p.post_id,
               p.author_id,
               COALESCE(s.student_name, pr.professor_name) AS user_name,
               p.post_title,
               p.post_notice,
               p.post_read_count,
               p.post_created_at,
               p.post_updated_at,
               p.post_group,
               p.post_group_level,
               p.post_group_step
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        WHERE p.post_notice = 0
        <where>
            <if test="searchDto.searchType != null and searchDto.searchType != ''">
                <choose>
                    <when test="searchDto.searchType == 'userName'">
                        AND COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </when>
                    <when test="searchDto.searchType == 'postTitle'">
                        AND p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </when>
                    <when test="searchDto.searchType == 'postContent'">
                        AND p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                    </when>
                    <when test="searchDto.searchType == 'postTitle,userName'">
                        AND (p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                    <when test="searchDto.searchType == 'postTitle,postContent'">
                        AND (p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                    <when test="searchDto.searchType == 'userName,postContent'">
                        AND (COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                    <when test="searchDto.searchType == 'postTitle,userName,postContent'">
                        AND (p.post_title LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchDto.searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchDto.searchKeyword}, '%'))
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY p.post_group DESC, p.post_group_step ASC
        LIMIT #{pageDto.itemsPerPage} OFFSET #{pageDto.offset}
    </select>

    <select id="countPosts" parameterType="com.ldb.lms.dto.board.post.PostSearchDto" resultType="int">
        SELECT COUNT(*)
        FROM post p
        LEFT JOIN student s ON p.author_id = s.student_id
        LEFT JOIN professor pr ON p.author_id = pr.professor_id
        WHERE p.post_notice = 0
        <where>
            <if test="searchType != null and searchType != ''">
                <choose>
                    <when test="searchType == 'userName'">
                        AND COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchKeyword}, '%')
                    </when>
                    <when test="searchType == 'postTitle'">
                        AND p.post_title LIKE CONCAT('%', #{searchKeyword}, '%')
                    </when>
                    <when test="searchType == 'postContent'">
                        AND p.post_content LIKE CONCAT('%', #{searchKeyword}, '%')
                    </when>
                    <when test="searchType == 'postTitle,userName'">
                        AND (p.post_title LIKE CONCAT('%', #{searchKeyword}, '%')
                            OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                    <when test="searchType == 'postTitle,postContent'">
                        AND (p.post_title LIKE CONCAT('%', #{searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                    <when test="searchType == 'userName,postContent'">
                        AND (COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                    <when test="searchType == 'postTitle,userName,postContent'">
                        AND (p.post_title LIKE CONCAT('%', #{searchKeyword}, '%')
                            OR COALESCE(s.student_name, pr.professor_name) LIKE CONCAT('%', #{searchKeyword}, '%')
                            OR p.post_content LIKE CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <update id="updateGroupStep">
        UPDATE post
        SET post_group_step = post_group_step + 1
        WHERE post_group = #{postGroup}
        AND post_group_step >= #{postGroupStep}
    </update>

    <insert id="insertComment" parameterType="com.ldb.lms.dto.board.post.CommentDto">
        INSERT INTO post_comment (
            comment_id, post_id, writer_id, comment_content, parent_comment_id, created_at
        ) VALUES (
            #{commentId}, #{postId}, #{writerId}, #{commentContent}, #{parentCommentId}, NOW()
        )
    </insert>

    <update id="updateComment" parameterType="com.ldb.lms.dto.board.post.CommentDto">
        UPDATE post_comment
        SET comment_content = #{commentContent},
            updated_at = NOW() WHERE comment_id = #{commentId}
    </update>

    <delete id="deleteComment" parameterType="string">
        DELETE FROM post_comment WHERE comment_id = #{commentId}
    </delete>

    <select id="selectComment" parameterType="string" resultType="com.ldb.lms.dto.board.post.CommentDto">
        SELECT comment_id, post_id, writer_id, comment_content,
               parent_comment_id, created_at, updated_at FROM post_comment
        WHERE comment_id = #{commentId}
    </select>

    <select id="selectCommentList" parameterType="string" resultType="com.ldb.lms.dto.board.post.CommentDto">
        SELECT c.comment_id, c.post_id, c.writer_id,
               COALESCE(s.student_name, pr.professor_name) AS writer_name,
               c.comment_content, c.parent_comment_id, c.created_at, c.updated_at FROM post_comment c
        LEFT JOIN student s ON c.writer_id = s.student_id
        LEFT JOIN professor pr ON c.writer_id = pr.professor_id
        WHERE c.post_id = #{postId}
        ORDER BY c.created_at ASC
     </select>
</mapper>